// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	gotwilio "github.com/sfreiberg/gotwilio"
	mock "github.com/stretchr/testify/mock"

	types "github.com/comptag/bobcat-lamp/internal/types"
)

// SmsClient is an autogenerated mock type for the SmsClient type
type SmsClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: sid
func (_m *SmsClient) Get(sid string) (*gotwilio.SmsResponse, error) {
	ret := _m.Called(sid)

	var r0 *gotwilio.SmsResponse
	if rf, ok := ret.Get(0).(func(string) *gotwilio.SmsResponse); ok {
		r0 = rf(sid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gotwilio.SmsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: from, to, body
func (_m *SmsClient) Send(from types.PhoneNumber, to types.PhoneNumber, body string) (*gotwilio.SmsResponse, error) {
	ret := _m.Called(from, to, body)

	var r0 *gotwilio.SmsResponse
	if rf, ok := ret.Get(0).(func(types.PhoneNumber, types.PhoneNumber, string) *gotwilio.SmsResponse); ok {
		r0 = rf(from, to, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gotwilio.SmsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.PhoneNumber, types.PhoneNumber, string) error); ok {
		r1 = rf(from, to, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
